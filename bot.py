import asyncio
import logging
from http.client import responses

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message
from openai import OpenAI

TOKEN = ''
logging.basicConfig(level=logging.INFO)
bot = Bot(TOKEN)
dp = Dispatcher()

a = {}
e = [
    {"n": "–≥–µ—Ä–º–∞–Ω—Ç–∏–Ω –º—è—á",     "p": 2000, "q": 5},
    {"n": "—è–±–ª–æ–∫–æ",  "p": 100,  "q": 45},
    {"n": "—Ö–ª–µ–±",    "p": 150,  "q": 20},
    {"n": "–ª–∞–º–±–∞–¥–∞",  "p": 200,  "q": 30},
    {"n": "–∫–∞–ø–∏–ª–∫–∞",     "p": 800,  "q": 10},
    {"n": "–±–∞–Ω–∞–Ω",   "p": 120,  "q": 25},
    {"n": "–∫–∞—Ä—Ç–æ—à–∫–∞","p": 80,   "q": 50},
    {"n": "–∫—É—Ä–∏—Ü–∞",  "p": 600,  "q": 15},
    {"n": "—Ä–∏—Å",     "p": 250,  "q": 40},
    {"n": "—è–π—Ü–æ",    "p": 20,   "q": 100},
    {"n": "–ö–æ–∫–∞-–∫–æ–ª–∞", "p" : 500, "q": 21}
]
g = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ù–∞—É—Ä—ã–∑–±–∞–π, –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ üôÇ', parse_mode="HTML")

@dp.message(lambda message: message.text or message.photo or message.document)
async def filter_messages(message: Message):
    c = message.chat.id

    if c in g and g[c]:
        g[c] = False
        await message.answer("–°–ø–∞—Å–∏–±–æ! –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–∏–ª. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–∫—É–ø–∫—É!", parse_mode="Markdown")
        return

    if message.text and '–æ–ø–ª–∞—Ç' in message.text.lower():
        await message.answer("–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ Kaspi: 8 707 298 06 63 –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫.")
        g[c] = True
        return

    if not message.text:
        return

    if c not in a:
        a[c] = []
    a[c].append({"role": "user", "content": message.text})
    a[c] = a[c][-10:]

    f = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∞—É—Ä—ã–∑–±–∞–π, —è –≤–ª–∞–¥–µ–ª–µ—Ü –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´“ö–∞—Ä–∞–º–∞-“õ–∞—Ä—Å—ã¬ª. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥—ë–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ.:\n"
    for i in e:
        f = f + i["n"] + " ‚Äî " + str(i["p"]) + " —Ç–≥ ‚Äî " + str(i["q"]) + "\n"
    b = [{"role": "system", "content": f + "\n–¢—ã ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü –≤ –Ω–µ–±–æ–ª—å—à–æ–º –º–∞–≥–∞–∑–∏–Ω–µ. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –≤–µ–∂–ª–∏–≤–æ, —Å –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ–º–æ—á—å. –í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –ï—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ ‚Äî –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π, –ø–æ–ø—Ä–æ—â–∞–π—Å—è, –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç. –ù–µ –ø–∏—à–∏ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ-–¥–æ–±—Ä–æ–º—É."}] + a[c]

    client = OpenAI(
        base_url="https://api.langdock.com/openai/eu/v1",
        api_key="sk-p0N53JZL_hWs4LGqmSBa1mIoJLGJfzOUdTu6UdSSrQCs_K6sVntjg82xbbXsm0HhJ9skFtEucO7SHu8Q6WNHeQ"
    )
    d = client.chat.completions.create(
        model="gpt-4o",
        messages=b
    ).choices[0].message.content

    a[c].append({"role": "assistant", "content": d})
    a[c] = a[c][-10:]
    await message.answer(d, parse_mode="Markdown")

async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

